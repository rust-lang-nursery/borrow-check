use ir::*;

grammar;

pub Input: Input = {
    Comment* <universal_regions:UniversalRegions> Comment* <blocks:BlockDefn*> => Input { <> }
};

Comment: () = {
    r"//.*"
};

UniversalRegions = "universal_regions" "{" <Comma<Region>> "}";
BlockDefn : Block = {
    "block" <name:Block> "{" <statements:Statement*> Comment* <goto:Goto> "}" => Block { <> },
};

Goto: Vec<String> = {
    "goto" <Comma<Block>> ";",
    () => Vec::new(),
};

Statement : Statement = {
    Comment* <Effects> ";" => Statement::new(<>),
    Comment* <start_effects:Effects> "/" <effects:Effects> ";" => Statement::with_start_effects(<>),
};

Effects = Comma<Effect>;
Effect = { 
    <Fact> => Effect::Fact(<>),
    Use
};

Fact : Fact = {
  "outlives" "(" <a:Region> ":" <b:Region> ")" => Fact::Outlives { <> },
  "borrow_region_at" "(" <region:Region> "," <loan:Loan> ")" => Fact::BorrowRegionAt { <> },
  "invalidates" "(" <loan:Loan> ")" => Fact::Invalidates { <> },
  "kill" "(" <loan:Loan> ")" => Fact::Kill { <> },
};

Use : Effect = "use" "(" <regions:Comma<Region>> ")" => Effect::Use { <> };

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Region: String = {
    r"'\w+" => <>.to_string()
};

Block: String = {
    r"B\w+" => <>.to_string()
};

Loan: String = {
    r"L\w+" => <>.to_string()
};